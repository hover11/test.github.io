<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
    <!--读取db.properties -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 配置数据源 -->
    
	<bean id="dataSource" 
            class="org.apache.commons.dbcp2.BasicDataSource">
        <!--数据库驱动 -->
        <property name="driverClassName" value="${jdbc.driver}" />
        <!--连接数据库的url -->
        <property name="url" value="${jdbc.url}" />
        <!--连接数据库的用户名 -->
        <property name="username" value="${jdbc.username}" />
        <!--连接数据库的密码 -->
        <property name="password" value="${jdbc.password}" />
        <!--最大连接数 -->
        <property name="maxTotal" value="${jdbc.maxTotal}" />
        <!--最大空闲连接  -->
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        <!--初始化连接数  -->
        <property name="initialSize" value="${jdbc.initialSize}" />
	</bean>
	<!-- 事务管理器，依赖于数据源(建立事务管理类)(相当于aop的切面) --> 
	<bean id="transactionManager" class= "org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>	
    <!--开启事务注解(有注解的时候需要) -->
	    
	  <!-- 编写事务通知(相当于编写切面),依赖于事务管理类 -->
	   <tx:advice id="tdAdvice" transaction-manager="transactionManager">
	   <tx:attributes>
	   <tx:method name="add*" propagation="REQUIRED" />
	   <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
	   </tx:attributes>
	   </tx:advice>
	<!-- 编写AOP,让spring自动将事务切入到目标切点 -->
	<!-- 当要使用实现了某个接口的类让Spring来生成bean时,无需在aop配置中添加proxy-target-class,因为它默认为false.

但如果要使用一个指定的类,让Spring来生成bean,并使用它的某个方法时,需要在aop配置上加上一句proxy-target-class="true"(Spring默认是cglib动态代理(强制转换为高一级的父类接口))-->
	
	<aop:config >
	<aop:pointcut  id="txPointCut" expression="execution(* cn.edu.xit.service.*.*(..))"/>
	<aop:advisor advice-ref="tdAdvice" pointcut-ref="txPointCut"/>
	</aop:config>
	  
	    
    <!--配置MyBatis工厂 -->
    <!-- Mybatis依赖于数据源(生成sqlsession)(使mapper.xml文件能够用sql对数据库的数据直接操作)(但一般需要创建一个属于这个xml文件的接口,为了安全处理数据) -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"></property>
    <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    <!-- 插入一个拦截器插件(plugins) -->
        <!-- 分页查询是在查询数据库的时候拦截下sql，修改sql(limit)使其实现分页效果 -->
    
    <!-- 分页查询:有多个页面拦截器(如:有3页就说明有3个页面拦截器(1,2,3)(还有个pageNum为0,因为下面的reasonable为true,所以只有3个页面拦截器)),所以需要有array数组进行保存 -->
    <!-- 这个页面拦截器的类里面的Properties属性名称为 properties-->
    <!--<props>是bean-property的子标签(<prop>是持久性将属性值注入Properties对象中)(耦合性))-->
    <property name="plugins">
    <array>
    <bean class="com.github.pagehelper.PageInterceptor">

    <property name="properties">
    <props>
<!--     helperDialect属性自动检测当前的数据库链接，自动选择合适的分页方式
 -->    <prop key="helperDialect">mysql</prop>
<!--     分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页(pageNum变为1)，pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。
 -->    <prop key="reasonable">true</prop>
    </props>
    </property>
    </bean>
    </array>
    </property> 
    </bean>
    
   
   
	<!-- Mapper代理开发（基于MapperFactoryBean） -->
	<!-- org.mybatis.spring.mapper是这个包下的MapperFactoryBean -->
    <!-- <bean id="customerMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="cn.edu.xit.Mapper.CustomerMapper"></property>
	<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean> -->  
	
 <!-- 利用Mapper接口生成Mapper对象的(MapperScannerConfigurer)类 -->
 <!-- MapperFactoryBean和MapperScannerConfigurer的区别:前者是创建单个mapper(Dao层)接口的实现类,后者可自动扫描创建多个mapper(Dao层)接口的实现类-->
 <!--注意:如果想通过service层进行普通调用，则必须用 MapperFactoryBean进行生成mapper层实现类,才能用MapperFactoryBean的id属性被service实现类的property标签属性所指向(ref);不可用后者:因为后者返回的是多个对象(相当于List<object>)-->
 <!-- 如果是想利用MapperScannerConfigurer进行service层调用的话，就需要用到注解调用 -->
 <!-- 相同点:只能为mapper(dao)层创建实现类！！ -->
  <!-- 如果想直接通过mapper层进行调用,两个都可用,MapperFactoryBean(测试类getBean通过id进行得到xml创造好的实例对象),MapperScannerConfigurer(测试类getBean通过类名.class进行获得对象) -->
  
    <!-- 创建mapper(dao)层的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="cn.edu.xit.mapper"></property>
	</bean>   
	<!-- 扫描这个包下面的类(!!!不是接口),并通过注解创建类 -->
	<!-- 创建service层的类的实例 -->
    <context:component-scan base-package="cn.edu.xit.service"></context:component-scan>	
	
	
	
	<!-- 开启扫描 --> <!-- MapperScannerConfigurer标签创建许多dao类 -->
	
	
</beans>
